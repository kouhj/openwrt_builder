#=================================================
# https://github.com/tete1030/openwrt-fastbuild-actions
# Description: FAST building OpenWrt with Github Actions and Docker!
# Lisence: MIT
# Author: Texot
#=================================================

env:
  # DO NOT CHANGE the following here, set them only in forked repo's Settings->Secrets page
  # You don't need to set docker_registry if you are using the default Docker Hub
  # 安全起见以下参数请不要在此更改，在你Fork的repo中，Settings->Secrets页面更改
  # 如果你想使用默认的Docker Hub，你不需要在secrets页面设置docker_registry
  DK_REGISTRY: ${{secrets.docker_registry}}
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  TMATE_ENCRYPT_PASSWORD: ${{secrets.TMATE_ENCRYPT_PASSWORD}}

name: Build OpenWrt

on:
  deployment:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "**/*"
  # # For 'schedule', see examples in: https://crontab.guru/examples.html
  # #     e.g. every sunday midnight: '0 0 * * 0' every midnight: '0 0 * * *'
  # schedule:
  #   - cron: '0 0 * * 0'
  # watch:
  #   types: [started]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    # For `github.event`'s structure, see: https://developer.github.com/v3/activity/events/types/
    # Do not modify the trigger methods here, customize them in the `on` section
    if: |
      github.event_name == 'push'
      || github.event_name == 'repository_dispatch'
      || github.event_name == 'workflow_dispatch'
      || github.event_name == 'deployment'
      || (github.event_name == 'watch' && github.event.action == 'started' && github.event.repository.owner.id == github.event.sender.id)
      || github.event_name == 'schedule'
    name: ${{matrix.title}} ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        mode:
          - normal
        #  - test
        # ########### Add your target name below ###########
        # targets are located in the folder user/${TARGET_NAME}/
        target: [x64, ax6s, cr6609]
        include:
          - mode: normal
            title: Build
          #- mode: test
          #  title: Fast check
    env:
      OPT_DEBUG: 0
      HOST_WORK_DIR: ${{github.workspace}}
      BUILD_MODE: ${{matrix.mode}}
      BUILD_TARGET: ${{matrix.target}}

    permissions:
      contents: write

    steps:
      - name: Setup timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: Asia/Shanghai

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout private tools maintained by kouhj
        uses: actions/checkout@v3
        with:
          repository: kouhj/kouhj_openwrt_packages
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: kouhj_src

      - name: Step 01 - Init build env
        run: scripts/cisteps/build-openwrt/01-init_env.sh

      - name: Step 02 - Check if skip this job
        run: scripts/cisteps/build-openwrt/02-check_target.sh

      # James: We have enough disk space, don't cleanup to save time
      #- name: Clean up for extra space
      #  if: env.SKIP_TARGET == '0'
      #  run: scripts/cisteps/build-openwrt/03-clean_up.sh

      # https://github.com/docker/setup-qemu-action
      # install QEMU static binaries.
      - name: Set up QEMU
        id: buildx-qemu
        if: env.SKIP_TARGET == '0'
        uses: docker/setup-qemu-action@v3
      
      - name: Show status
        run: echo "SKIP_TARGET=${SKIP_TARGET}/${{env.SKIP_TARGET}}, OPT_DEBUG=${OPT_DEBUG}/${{env.OPT_DEBUG}}"

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        if: env.SKIP_TARGET == '0'
        uses: docker/setup-buildx-action@v3

      - name: Step 04 - Configure docker
        if: env.SKIP_TARGET == '0'
        run: scripts/cisteps/build-openwrt/04-configure_docker.sh

      - name: Step 05 - Check status of builders
        if: env.SKIP_TARGET == '0'
        run: scripts/cisteps/build-openwrt/05-check_builders.sh

      - name: "[Debug] Wait for SSH connection (timeout 5min)"
        if: env.SKIP_TARGET == '0' && env.OPT_DEBUG == '1'
        env:
          TIMEOUT_MIN: 5
        uses: tete1030/safe-debugger-action@dev

      # GITHUB_ENV filename changed between step 05 and 06, why?

      - name: Step 06 - Get builder
        if: env.SKIP_TARGET == '0'
        run: scripts/cisteps/build-openwrt/06-get_builder.sh

      - name: Step 07 - Clone/update OpenWrt
        id: update
        if: env.SKIP_TARGET == '0'
        run: scripts/cisteps/build-openwrt/07-download_openwrt.sh

      - name: Step 08 - Apply customizations
        if: env.BUILD_NEEDED == 'yes' && env.SKIP_TARGET == '0'
        # The following script will set env.CUSTOMIZE_STATUS == 'success' if success
        run: scripts/cisteps/build-openwrt/08-customize.sh

      # Allow intermediate customization
      - name: "[Debug/Menuconfig] Wait for SSH connection (timeout 30min)"
        if: env.SKIP_TARGET == '0' && env.OPT_DEBUG == '1'
        env:
          TMATE_DOCKER_CONTAINER: ${{env.BUILDER_CONTAINER_ID}}
        uses: tete1030/safe-debugger-action@dev

      - name: Step 09 - Prepare config file
        if: env.BUILD_NEEDED == 'yes' && env.SKIP_TARGET == '0'
        # The following script will set env.CONFIG_STATUS == 'success' if success
        run: scripts/cisteps/build-openwrt/09-prepare_config.sh

      # Should not call this, as we are using SDK
      #- name: Download packages
      #  if: env.SKIP_TARGET == '0'
      #  run: scripts/cisteps/build-openwrt/10-download_packages.sh

      - name: Show all env variables
        run: env | sort

      - name: Print disk space
        if: env.SKIP_TARGET == '0'
        run: df -h

      - name: Step 11 - Compile firmware and packages with multiple threads
        id: mtcompile
        if: env.BUILD_NEEDED == 'yes' && env.CONFIG_STATUS == 'success' && env.SKIP_TARGET == '0'
        continue-on-error: true
        run: scripts/cisteps/build-openwrt/11-compile_multi.sh

      - name: Step 12 - Compile firmware and packages with single threads when failed
        if: env.BUILD_NEEDED == 'yes' && env.CONFIG_STATUS == 'success' && env.SKIP_TARGET == '0' && env.COMPILE_STATUS != 'success'
        run: scripts/cisteps/build-openwrt/12-compile_single.sh

      - name: Print disk space
        if: env.SKIP_TARGET == '0'
        run: df -h

      # failure checking
      - name: "[Failure/Debug] Wait for SSH connection (timeout 30min)"
        if: |
          env.BUILD_NEEDED == 'yes' && env.SKIP_TARGET == '0' && !cancelled()
          && (job.status == 'failure' || env.COMPILE_STATUS != 'success' || (env.OPT_DEBUG == '1'))
        env:
          TMATE_DOCKER_CONTAINER: ${{env.BUILDER_CONTAINER_ID}}
        uses: tete1030/safe-debugger-action@dev

      - name: Step 13 - Upload builder
        if: |
          env.BUILD_NEEDED == 'yes' && env.SKIP_TARGET == '0' && !cancelled() && (
            job.status == 'success'
            || env.OPT_PUSH_WHEN_FAIL == '1'
          ) && env.AUTO_UPLOAD_BUILDER == '1'
        # kouhj 2024: upload of builder has to be explicitly config'd
        run: scripts/cisteps/build-openwrt/13-upload_builder.sh

      # - name: Upload bin directory
      #   uses: actions/upload-artifact@master
      #   if: env.SKIP_TARGET == '0' && !cancelled()
      #   with:
      #     name: OpenWrt_bin_${{env.BUILD_TARGET}}
      #     path: ${{env.HOST_BIN_DIR}}

      - name: Step 14 - Organize files
        id: organize
        if: env.BUILD_NEEDED == 'yes' && env.SKIP_TARGET == '0' && !cancelled() && env.COMPILE_STATUS == 'success'
        # The following script will set env.ORGANIZE_STATUS == 'success' if success
        run: scripts/cisteps/build-openwrt/14-organize_files.sh

      # transfer.sh is not stable, so we use github release instead
      - name: Step 15 - Generate Archive
        id: archive
        if: env.BUILD_NEEDED == 'yes' && env.ORGANIZE_STATUS == 'success' && env.COMPILE_STATUS == 'success'
        run: scripts/cisteps/build-openwrt/15-generate_archive.sh

      - name: Upload Artifacts
        id: upload
        uses: actions/upload-artifact@v4
        if: |
          env.SKIP_TARGET == '0' && env.OPT_PACKAGE_ONLY != '1' && env.COMPILE_STATUS == 'success' &&
          env.BUILD_NEEDED == 'yes' && env.ORGANIZE_STATUS == 'success' && !cancelled()
        with:
          name: ${{env.RELEASE_NAME}}
          path: ${{env.ARTIFACT_PATH}}

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: |
          env.SKIP_TARGET == '0' && env.OPT_PACKAGE_ONLY != '1' && env.COMPILE_STATUS == 'success' &&
          env.BUILD_NEEDED == 'yes' && env.ORGANIZE_STATUS == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{env.RELEASE_NAME}}
          body: "Built artifacts of ${{env.RELEASE_NAME}} available for download."
          files: ${{env.ARTIFACT_PATH}}

      # failure checking
      - name: "[Failure/Debug] wait for SSH connection (timeout 30min. You are safe to cancel the job now.)"
        if: |
          env.SKIP_TARGET == '0' && !cancelled()
          && (job.status == 'failure' || (env.OPT_DEBUG == '1') || env.COMPILE_STATUS != 'success')
        uses: tete1030/safe-debugger-action@dev

  download-artifacts:  # Job 2: Download artifacts
    runs-on: ubuntu-latest
    needs: build-and-upload  # Job depends on build-and-upload job completion
    steps:
    - uses: actions/download-artifact@v4  # Download artifacts (v4)
      with:
        pattern: OpenWrt_firmware_*
        merge-multiple: true
    - name: list files
      run: ls -l
